generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email  String  @unique
  hash   String
  hashRt String?

  Playlist Playlist[]

  @@map("users")
}

model Artist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  imageUrl String

  albums Album[]
}

model Album {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  imageUrl String

  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String
  songs    Song[]
}

model Song {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  duration Int

  album     Album              @relation(fields: [albumId], references: [id])
  albumId   String
  playlists SongsOnPlaylists[]
}

model Playlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  owner   User               @relation(fields: [ownerId], references: [id])
  ownerId String
  songs   SongsOnPlaylists[]
}

model SongsOnPlaylists {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  songId     String
  playlistId String
  song       Song     @relation(fields: [songId], references: [id])
  playlist   Playlist @relation(fields: [playlistId], references: [id])
}
